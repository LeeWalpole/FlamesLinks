"use client";
import { useState, useRef } from "react";
import styles from "./grid.module.css";

const GridComponent = () => {
  const [grid, setGrid] = useState([
    { id: 1, image: null },
    { id: 2, image: null },
    { id: 3, image: null },
    { id: 4, image: null },
    { id: 5, image: null },
    { id: 6, image: null },
    { id: 7, image: null },
    { id: 8, image: null },
    { id: 9, image: null },
  ]);
  const [draggedIndex, setDraggedIndex] = useState(null);
  const fileInputsRef = useRef([]);

  const handleDragStart = (event, index) => {
    event.dataTransfer.setData("text/plain", index);
    setDraggedIndex(index);
  };

  const handleDragOver = (event) => {
    event.preventDefault();
  };

  const handleDrop = (event, newIndex) => {
    const index = parseInt(event.dataTransfer.getData("text/plain"));
    const newGrid = [...grid];
    const movedSquare = newGrid.splice(index, 1)[0];
    newGrid.splice(newIndex, 0, movedSquare);
    setGrid(newGrid);
    setDraggedIndex(null);
  };

  const handleFileChange = (event, index) => {
    const file = event.target.files[0];
    const newGrid = [...grid];
    newGrid[index].image = URL.createObjectURL(file);
    setGrid(newGrid);
  };

  const handleClick = (index) => {
    fileInputsRef.current[index].click();
  };

  return (
    <div className={styles.gridContainer}>
      <div className={styles.squareContainer}>
        {grid.map((square, index) => (
          <div
            key={square.id}
            draggable
            onDragStart={(event) => handleDragStart(event, index)}
            onDragOver={handleDragOver}
            onDrop={(event) => handleDrop(event, index)}
            className={`${styles.square} ${
              index === draggedIndex ? styles.dragging : ""
            }`}
            onClick={() => handleClick(index)}
          >
            {square.image ? (
              <img src={square.image} alt={`Square ${square.id}`} />
            ) : (
              <div>
                <input
                  type="file"
                  accept="image/*"
                  onChange={(event) => handleFileChange(event, index)}
                  className={styles.fileInput}
                  ref={(ref) => (fileInputsRef.current[index] = ref)}
                />
                <label
                  htmlFor={`fileInput${square.id}`}
                  className={styles.fileInputLabel}
                ></label>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default GridComponent;
